language: python
python:
    - "3.6"

cache:
  directories:
    # We cache the SDK so we don't have to download it again on subsequent builds.
    - $HOME/google-cloud-sdk

env:
  COMMIT: ${TRAVIS_COMMIT::8}
  MAIN_REPO: https://github.com/yeeeshiuan/service.git
  global:
    # Do not prompt for user input when using any SDK methods.
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1 

before_install:
    - if [ ! -d "$HOME/google-cloud-sdk/bin" ]; then rm -rf "$HOME/google-cloud-sdk"; curl https://sdk.cloud.google.com | bash > /dev/null; fi

    # This line is critical. We setup the SDK to take precedence in our
    # environment over the old SDK that is already on the machine.
    - source $HOME/google-cloud-sdk/path.bash.inc
    - gcloud components update
    - gcloud version
    # [START auth]
    # Decrypt the credentials we added to the repo using the key we added with the Travis command line tool
    - openssl aes-256-cbc -K $encrypted_dbd77db57cd9_key -iv $encrypted_dbd77db57cd9_iv -in credentials.tar.gz.enc -out credentials.tar.gz -d
    - tar -xzf credentials.tar.gz
    - mkdir -p lib
    # Here we use the decrypted service account credentials to authenticate the command line tool
    - gcloud auth activate-service-account --key-file client-secret.json
    # [END auth]

    - export FLASK_ENV=development
    - export APP_SETTINGS=project.config.DevelopmentConfig
    - export SECRET_KEY=my_precious
    - export FLASK_APP=project

install:
    # Set the correct project to deploy
    - gcloud config set project $googleAppId
    - cd service
    - pip install -r requirements.txt


script:
    - python manage.py cov
    # Deploy the app
    - gcloud -q app deploy app.yaml --promote --verbosity=debug
